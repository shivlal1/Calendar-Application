package controller;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.nio.file.Paths;

import model.Calendar;
import model.ICalendar;

import static org.junit.Assert.assertEquals;
import static utils.DateUtils.pareStringToLocalDateTime;

/**
 * A unit test for the ExportCommand class.
 */
public class ExportCommandTest {
  ICommand exportCommand;
  ICalendar cal = new Calendar();
  String command;
  CreateCommand createCommand;

  @Before
  public void init() {
    exportCommand = new ExportCommand();
  }


  @Test(expected = Exception.class)
  public void testMissingExportCal() throws Exception {
    command = "filename.csv";
    exportCommand.execute(command, cal);
  }

  @Test(expected = Exception.class)
  public void testMissingFileName() throws Exception {
    command = "cal";
    exportCommand.execute(command, cal);
  }

  @Test(expected = Exception.class)
  public void testInvalidFileType() throws Exception {
    command = "cal filename.png";
    exportCommand.execute(command, cal);
  }

  @Test(expected = Exception.class)
  public void testIncorrectFileNameWithExtraWords() throws Exception {
    command = "cal filename.csv hello there";
    exportCommand.execute(command, cal);
  }

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  @Test
  public void emptyCommand() throws Exception {
    CalendarController controler = new CalendarController();

    thrown.expect(Exception.class);
    thrown.expectMessage("Invalid Command");
    ICalendar calendar = new Calendar();

    String command = "export cal";
    controler.execute(command, calendar);
  }

  @Test
  public void emptyCommand2() throws Exception {
    CalendarController controler = new CalendarController();

    thrown.expect(Exception.class);
    thrown.expectMessage("Invalid Command");
    ICalendar calendar = new Calendar();

    String command = "print events";
    controler.execute(command, calendar);
  }


  @Test
  public void createAsingleDayAllDay() throws Exception {

    ICalendar calendar = new Calendar();
    createCommand = new CreateCommand();
    command = "event \"Single Event\" on 2025-05-12T01:00";
    createCommand.execute(command, calendar);
    assertEquals(calendar.isUserBusy(pareStringToLocalDateTime("2025-05-12T01:05")), true);
    command = "cal filename.csv";
    exportCommand.execute(command, calendar);
    String actualOutput = captureStatusOutputOfExportCommand(command, calendar);
    String absolutePath = Paths.get("filename.csv").toAbsolutePath().toString();
    assertEquals("Absolute Path " + absolutePath + "\n", actualOutput);
  }

  /**
   * Captures and returns the output generated by executing the export command.
   *
   * @param command The command arguments passed to the export command.
   * @param cal     The ICalendar instance on which the command is executed.
   * @return The captured output as a String from the execution of the export command.
   * @throws Exception If command execution fails or an issue arises during output capture.
   */
  private String captureStatusOutputOfExportCommand(String command, ICalendar cal)
          throws Exception {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    PrintStream customOut = new PrintStream(outputStream);
    System.setOut(customOut);
    customOut.flush();
    int captureStartIndex = outputStream.size();
    exportCommand.execute(command, cal);
    System.setOut(originalOut);
    String capturedOutput = outputStream.toString();
    String filteredOutput = capturedOutput.substring(captureStartIndex);
    return filteredOutput;
  }

}